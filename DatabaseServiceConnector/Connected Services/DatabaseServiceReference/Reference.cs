//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyCompositeDTO", Namespace="http://schemas.datacontract.org/2004/07/DatabaseService")]
    public partial class CompanyCompositeDTO : object
    {
        
        private System.Collections.Generic.List<DatabaseServiceReference.CompanyDTO> CompanyDTOsField;
        
        private System.Collections.Generic.List<DatabaseServiceReference.CompanyTypeDTO> CompanyTypeDTOsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<DatabaseServiceReference.CompanyDTO> CompanyDTOs
        {
            get
            {
                return this.CompanyDTOsField;
            }
            set
            {
                this.CompanyDTOsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<DatabaseServiceReference.CompanyTypeDTO> CompanyTypeDTOs
        {
            get
            {
                return this.CompanyTypeDTOsField;
            }
            set
            {
                this.CompanyTypeDTOsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyDTO", Namespace="http://schemas.datacontract.org/2004/07/DatabaseService")]
    public partial class CompanyDTO : object
    {
        
        private DatabaseServiceReference.CompanyTypeDTO CompanyTypeField;
        
        private string CountryCodeField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DatabaseServiceReference.CompanyTypeDTO CompanyType
        {
            get
            {
                return this.CompanyTypeField;
            }
            set
            {
                this.CompanyTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCode
        {
            get
            {
                return this.CountryCodeField;
            }
            set
            {
                this.CountryCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompanyTypeDTO", Namespace="http://schemas.datacontract.org/2004/07/DatabaseService")]
    public partial class CompanyTypeDTO : object
    {
        
        private string DescriptionField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseServiceReference.IDatabaseService")]
    public interface IDatabaseService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetAllCompanies", ReplyAction="http://tempuri.org/IDatabaseService/GetAllCompaniesResponse")]
        System.Threading.Tasks.Task<DatabaseServiceReference.CompanyCompositeDTO> GetAllCompaniesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/GetCompanies", ReplyAction="http://tempuri.org/IDatabaseService/GetCompaniesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DatabaseServiceReference.CompanyDTO>> GetCompaniesAsync(System.Nullable<int> Id, string companyName, string countryCode, System.Nullable<int> companyType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/InsertCompany", ReplyAction="http://tempuri.org/IDatabaseService/InsertCompanyResponse")]
        System.Threading.Tasks.Task<bool> InsertCompanyAsync(string companyName, string countryCode, System.Nullable<int> companyType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface IDatabaseServiceChannel : DatabaseServiceReference.IDatabaseService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class DatabaseServiceClient : System.ServiceModel.ClientBase<DatabaseServiceReference.IDatabaseService>, DatabaseServiceReference.IDatabaseService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DatabaseServiceClient() : 
                base(DatabaseServiceClient.GetDefaultBinding(), DatabaseServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDatabaseService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), DatabaseServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DatabaseServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DatabaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<DatabaseServiceReference.CompanyCompositeDTO> GetAllCompaniesAsync()
        {
            return base.Channel.GetAllCompaniesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DatabaseServiceReference.CompanyDTO>> GetCompaniesAsync(System.Nullable<int> Id, string companyName, string countryCode, System.Nullable<int> companyType)
        {
            return base.Channel.GetCompaniesAsync(Id, companyName, countryCode, companyType);
        }
        
        public System.Threading.Tasks.Task<bool> InsertCompanyAsync(string companyName, string countryCode, System.Nullable<int> companyType)
        {
            return base.Channel.InsertCompanyAsync(companyName, countryCode, companyType);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDatabaseService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDatabaseService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:57698/DatabaseService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return DatabaseServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDatabaseService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return DatabaseServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDatabaseService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IDatabaseService,
        }
    }
}
